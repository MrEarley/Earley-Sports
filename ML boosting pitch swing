{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "28e48580",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "In this assessment we want to use the tools of data science and analysis to estimate the probability that the outcome of each pitch will be a swing. The final deliverable will be a column with the predicted probability of a swing on that pitch. This will help us in identifying pitching talent in years to come, even if they have not pitched in the MLB."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ccc4f515",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing necessary libraries\n",
    "\n",
    "# Data manipulation\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Visualization\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "from plotly.subplots import make_subplots\n",
    "import seaborn as sns\n",
    "import missingno as msno\n",
    "\n",
    "# Machine Learning Modeling\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import joblib\n",
    "from sklearn.pipeline import Pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f92946f",
   "metadata": {},
   "source": [
    "## Read in Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7cfd4ee4",
   "metadata": {},
   "outputs": [],
   "source": [
    "path = '/Users/williamearley/Documents/Professional/Jobs/Sports/Marlins/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ce917d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "year1 = pd.read_csv(path + 'year1.csv')\n",
    "year2 = pd.read_csv(path + 'year2.csv')\n",
    "year3 = pd.read_csv(path + 'year3.csv')\n",
    "documentation = pd.read_csv(path + 'documentation.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6d7d6f8",
   "metadata": {},
   "source": [
    "## Exploring Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8d0fbccc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>pitch_id</th>\n",
       "      <th>release_speed</th>\n",
       "      <th>batter</th>\n",
       "      <th>pitcher</th>\n",
       "      <th>description</th>\n",
       "      <th>stand</th>\n",
       "      <th>p_throws</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>pfx_x</th>\n",
       "      <th>pfx_z</th>\n",
       "      <th>plate_x</th>\n",
       "      <th>plate_z</th>\n",
       "      <th>sz_top</th>\n",
       "      <th>sz_bot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2697762.0</td>\n",
       "      <td>93.800003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SI</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.98</td>\n",
       "      <td>0.72</td>\n",
       "      <td>-1.23</td>\n",
       "      <td>4.10</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2697773.0</td>\n",
       "      <td>95.599998</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>foul</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.96</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>3.10</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2697902.0</td>\n",
       "      <td>94.800003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5842</td>\n",
       "      <td>foul</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>1.16</td>\n",
       "      <td>0.31</td>\n",
       "      <td>2.40</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2697993.0</td>\n",
       "      <td>87.300003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5041</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SL</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.82</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>1.11</td>\n",
       "      <td>2.21</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2697995.0</td>\n",
       "      <td>98.599998</td>\n",
       "      <td>5782</td>\n",
       "      <td>5041</td>\n",
       "      <td>called_strike</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>0.95</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>3.39</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>2697997.0</td>\n",
       "      <td>98.900002</td>\n",
       "      <td>5782</td>\n",
       "      <td>5041</td>\n",
       "      <td>foul</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>0.89</td>\n",
       "      <td>-0.75</td>\n",
       "      <td>2.76</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>2697712.0</td>\n",
       "      <td>95.400002</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>foul</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>0.98</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>2.36</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>2697720.0</td>\n",
       "      <td>87.400002</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SL</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.15</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>3.97</td>\n",
       "      <td>3.61</td>\n",
       "      <td>1.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>2697768.0</td>\n",
       "      <td>87.199997</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>called_strike</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SL</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.54</td>\n",
       "      <td>3.09</td>\n",
       "      <td>3.64</td>\n",
       "      <td>1.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>2697772.0</td>\n",
       "      <td>86.300003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>blocked_ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>KC</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.39</td>\n",
       "      <td>0.61</td>\n",
       "      <td>-0.19</td>\n",
       "      <td>3.67</td>\n",
       "      <td>1.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>2698519.0</td>\n",
       "      <td>90.699997</td>\n",
       "      <td>5130</td>\n",
       "      <td>5167</td>\n",
       "      <td>called_strike</td>\n",
       "      <td>R</td>\n",
       "      <td>L</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.62</td>\n",
       "      <td>1.57</td>\n",
       "      <td>0.85</td>\n",
       "      <td>2.53</td>\n",
       "      <td>3.52</td>\n",
       "      <td>1.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "      <td>2698528.0</td>\n",
       "      <td>91.099998</td>\n",
       "      <td>5130</td>\n",
       "      <td>5167</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>L</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.05</td>\n",
       "      <td>2.23</td>\n",
       "      <td>3.53</td>\n",
       "      <td>1.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1</td>\n",
       "      <td>2698539.0</td>\n",
       "      <td>90.599998</td>\n",
       "      <td>5130</td>\n",
       "      <td>5167</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>L</td>\n",
       "      <td>FF</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.66</td>\n",
       "      <td>1.33</td>\n",
       "      <td>0.64</td>\n",
       "      <td>3.65</td>\n",
       "      <td>3.53</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "      <td>2698529.0</td>\n",
       "      <td>85.599998</td>\n",
       "      <td>5458</td>\n",
       "      <td>5167</td>\n",
       "      <td>hit_into_play</td>\n",
       "      <td>R</td>\n",
       "      <td>L</td>\n",
       "      <td>CH</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.31</td>\n",
       "      <td>1.68</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1</td>\n",
       "      <td>2698575.0</td>\n",
       "      <td>79.300003</td>\n",
       "      <td>5130</td>\n",
       "      <td>5167</td>\n",
       "      <td>hit_by_pitch</td>\n",
       "      <td>R</td>\n",
       "      <td>L</td>\n",
       "      <td>CU</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.81</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>-2.25</td>\n",
       "      <td>0.20</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    season   pitch_id  release_speed  batter  pitcher    description stand  \\\n",
       "0        1  2697762.0      93.800003    5782     5738           ball     R   \n",
       "1        1  2697773.0      95.599998    5782     5738           foul     R   \n",
       "2        1  2697902.0      94.800003    5782     5842           foul     R   \n",
       "3        1  2697993.0      87.300003    5782     5041           ball     R   \n",
       "4        1  2697995.0      98.599998    5782     5041  called_strike     R   \n",
       "5        1  2697997.0      98.900002    5782     5041           foul     R   \n",
       "6        1  2697712.0      95.400002    5782     5738           foul     R   \n",
       "7        1  2697720.0      87.400002    5782     5738           ball     R   \n",
       "8        1  2697768.0      87.199997    5782     5738  called_strike     R   \n",
       "9        1  2697772.0      86.300003    5782     5738   blocked_ball     R   \n",
       "10       1  2698519.0      90.699997    5130     5167  called_strike     R   \n",
       "11       1  2698528.0      91.099998    5130     5167           ball     R   \n",
       "12       1  2698539.0      90.599998    5130     5167           ball     R   \n",
       "13       1  2698529.0      85.599998    5458     5167  hit_into_play     R   \n",
       "14       1  2698575.0      79.300003    5130     5167   hit_by_pitch     R   \n",
       "\n",
       "   p_throws pitch_type  balls  strikes  pfx_x  pfx_z  plate_x  plate_z  \\\n",
       "0         R         SI      1        1  -0.98   0.72    -1.23     4.10   \n",
       "1         R         FF      3        2  -0.38   0.96    -0.45     3.10   \n",
       "2         R         FF      1        0  -0.62   1.16     0.31     2.40   \n",
       "3         R         SL      2        1   0.82  -0.06     1.11     2.21   \n",
       "4         R         FF      3        1  -0.33   0.95    -0.35     3.39   \n",
       "5         R         FF      3        2  -0.42   0.89    -0.75     2.76   \n",
       "6         R         FF      0        0  -0.58   0.98    -0.16     2.36   \n",
       "7         R         SL      0        1   0.24   0.15    -0.25     3.97   \n",
       "8         R         SL      2        1   0.16   0.24    -0.54     3.09   \n",
       "9         R         KC      2        2   0.02  -0.39     0.61    -0.19   \n",
       "10        L         FF      0        0   0.62   1.57     0.85     2.53   \n",
       "11        L         FF      0        1   0.55   1.38     1.05     2.23   \n",
       "12        L         FF      1        2   0.66   1.33     0.64     3.65   \n",
       "13        L         CH      0        1   0.85   0.83     0.31     1.68   \n",
       "14        L         CU      1        1  -0.81  -0.61    -2.25     0.20   \n",
       "\n",
       "    sz_top  sz_bot  \n",
       "0     3.70    1.82  \n",
       "1     3.41    1.56  \n",
       "2     3.41    1.56  \n",
       "3     3.70    1.73  \n",
       "4     3.70    1.70  \n",
       "5     3.41    1.56  \n",
       "6     3.41    1.56  \n",
       "7     3.61    1.79  \n",
       "8     3.64    1.70  \n",
       "9     3.67    1.64  \n",
       "10    3.52    1.74  \n",
       "11    3.53    1.76  \n",
       "12    3.53    1.72  \n",
       "13    3.49    1.60  \n",
       "14    3.41    1.56  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year1.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6ff59247",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>pitch_id</th>\n",
       "      <th>release_speed</th>\n",
       "      <th>batter</th>\n",
       "      <th>pitcher</th>\n",
       "      <th>description</th>\n",
       "      <th>stand</th>\n",
       "      <th>p_throws</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>pfx_x</th>\n",
       "      <th>pfx_z</th>\n",
       "      <th>plate_x</th>\n",
       "      <th>plate_z</th>\n",
       "      <th>sz_top</th>\n",
       "      <th>sz_bot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>3398682.0</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>6351</td>\n",
       "      <td>5763</td>\n",
       "      <td>ball</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.08</td>\n",
       "      <td>0.68</td>\n",
       "      <td>-1.04</td>\n",
       "      <td>4.14</td>\n",
       "      <td>3.30</td>\n",
       "      <td>1.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3398692.0</td>\n",
       "      <td>87.800003</td>\n",
       "      <td>6351</td>\n",
       "      <td>5763</td>\n",
       "      <td>ball</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>SL</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.06</td>\n",
       "      <td>2.16</td>\n",
       "      <td>1.38</td>\n",
       "      <td>3.32</td>\n",
       "      <td>1.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3398660.0</td>\n",
       "      <td>87.099998</td>\n",
       "      <td>6859</td>\n",
       "      <td>6222</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SL</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.05</td>\n",
       "      <td>3.53</td>\n",
       "      <td>3.23</td>\n",
       "      <td>1.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>3398685.0</td>\n",
       "      <td>94.400002</td>\n",
       "      <td>6859</td>\n",
       "      <td>6222</td>\n",
       "      <td>called_strike</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>1.39</td>\n",
       "      <td>0.70</td>\n",
       "      <td>2.19</td>\n",
       "      <td>3.20</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>3398652.0</td>\n",
       "      <td>88.300003</td>\n",
       "      <td>6411</td>\n",
       "      <td>6222</td>\n",
       "      <td>called_strike</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>CH</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.98</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.51</td>\n",
       "      <td>2.15</td>\n",
       "      <td>3.66</td>\n",
       "      <td>1.74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season   pitch_id  release_speed  batter  pitcher    description stand  \\\n",
       "0       2  3398682.0      93.000000    6351     5763           ball     L   \n",
       "1       2  3398692.0      87.800003    6351     5763           ball     L   \n",
       "2       2  3398660.0      87.099998    6859     6222           ball     R   \n",
       "3       2  3398685.0      94.400002    6859     6222  called_strike     R   \n",
       "4       2  3398652.0      88.300003    6411     6222  called_strike     L   \n",
       "\n",
       "  p_throws pitch_type  balls  strikes  pfx_x  pfx_z  plate_x  plate_z  sz_top  \\\n",
       "0        R         FF      2        1  -1.08   0.68    -1.04     4.14    3.30   \n",
       "1        R         SL      3        2   0.80   0.06     2.16     1.38    3.32   \n",
       "2        R         SL      1        0   0.49   0.44     0.05     3.53    3.23   \n",
       "3        R         FF      3        1  -0.50   1.39     0.70     2.19    3.20   \n",
       "4        R         CH      0        0  -0.98   0.30     0.51     2.15    3.66   \n",
       "\n",
       "   sz_bot  \n",
       "0    1.48  \n",
       "1    1.51  \n",
       "2    1.47  \n",
       "3    1.33  \n",
       "4    1.74  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year2.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1ffdb20b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>pitch_id</th>\n",
       "      <th>release_speed</th>\n",
       "      <th>batter</th>\n",
       "      <th>pitcher</th>\n",
       "      <th>stand</th>\n",
       "      <th>p_throws</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>pfx_x</th>\n",
       "      <th>pfx_z</th>\n",
       "      <th>plate_x</th>\n",
       "      <th>plate_z</th>\n",
       "      <th>sz_top</th>\n",
       "      <th>sz_bot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>4135978.0</td>\n",
       "      <td>78.800003</td>\n",
       "      <td>5464</td>\n",
       "      <td>6936</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>ST</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.11</td>\n",
       "      <td>0.30</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>0.49</td>\n",
       "      <td>3.58</td>\n",
       "      <td>1.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>4135989.0</td>\n",
       "      <td>93.699997</td>\n",
       "      <td>5464</td>\n",
       "      <td>6936</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-1.16</td>\n",
       "      <td>1.36</td>\n",
       "      <td>-1.57</td>\n",
       "      <td>2.49</td>\n",
       "      <td>3.58</td>\n",
       "      <td>1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4135993.0</td>\n",
       "      <td>94.199997</td>\n",
       "      <td>5464</td>\n",
       "      <td>6936</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-1.24</td>\n",
       "      <td>1.26</td>\n",
       "      <td>-1.31</td>\n",
       "      <td>3.48</td>\n",
       "      <td>3.68</td>\n",
       "      <td>1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4131576.0</td>\n",
       "      <td>91.199997</td>\n",
       "      <td>6446</td>\n",
       "      <td>6727</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.03</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.02</td>\n",
       "      <td>2.31</td>\n",
       "      <td>3.29</td>\n",
       "      <td>1.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>4131602.0</td>\n",
       "      <td>84.500000</td>\n",
       "      <td>5667</td>\n",
       "      <td>6727</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SL</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.61</td>\n",
       "      <td>1.36</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.63</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season   pitch_id  release_speed  batter  pitcher stand p_throws  \\\n",
       "0       3  4135978.0      78.800003    5464     6936     L        R   \n",
       "1       3  4135989.0      93.699997    5464     6936     L        R   \n",
       "2       3  4135993.0      94.199997    5464     6936     L        R   \n",
       "3       3  4131576.0      91.199997    6446     6727     R        R   \n",
       "4       3  4131602.0      84.500000    5667     6727     R        R   \n",
       "\n",
       "  pitch_type  balls  strikes  pfx_x  pfx_z  plate_x  plate_z  sz_top  sz_bot  \n",
       "0         ST      1        1   1.11   0.30    -0.33     0.49    3.58    1.66  \n",
       "1         FF      2        2  -1.16   1.36    -1.57     2.49    3.58    1.69  \n",
       "2         FF      3        2  -1.24   1.26    -1.31     3.48    3.68    1.69  \n",
       "3         FF      0        0  -1.03   1.38     1.02     2.31    3.29    1.58  \n",
       "4         SL      3        2   0.20   0.12     0.61     1.36    3.41    1.63  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year3.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a2caf120",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Column</th>\n",
       "      <th>Definition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>season</td>\n",
       "      <td>Id for Season</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>pitch_id</td>\n",
       "      <td>Unique Id for Pitch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>release_speed</td>\n",
       "      <td>Pitch velocity reported out-of-hand.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>batter</td>\n",
       "      <td>Player Id tied to the play event.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>pitcher</td>\n",
       "      <td>Player Id tied to the play event.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>description</td>\n",
       "      <td>Description of the resulting pitch.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>stand</td>\n",
       "      <td>Side of the plate batter is standing.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>p_throws</td>\n",
       "      <td>Hand pitcher throws with.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>pitch_type</td>\n",
       "      <td>The type of pitch derived from Statcast.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>balls</td>\n",
       "      <td>Pre-pitch number of balls in count.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>strikes</td>\n",
       "      <td>Pre-pitch number of strikes in count.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>pfx_x</td>\n",
       "      <td>Horizontal movement in feet from the catcher's...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>pfx_z</td>\n",
       "      <td>Vertical movement in feet from the catcher's p...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>plate_x</td>\n",
       "      <td>Horizontal position of the ball when it crosse...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>plate_z</td>\n",
       "      <td>Vertical position of the ball when it crosses ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>sz_top</td>\n",
       "      <td>Top of the batter's strike zone set by the ope...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>sz_bot</td>\n",
       "      <td>Bottom of the batter's strike zone set by the ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Column                                         Definition\n",
       "0          season                                      Id for Season\n",
       "1        pitch_id                                Unique Id for Pitch\n",
       "2   release_speed               Pitch velocity reported out-of-hand.\n",
       "3          batter                  Player Id tied to the play event.\n",
       "4         pitcher                  Player Id tied to the play event.\n",
       "5     description                Description of the resulting pitch.\n",
       "6           stand              Side of the plate batter is standing.\n",
       "7        p_throws                          Hand pitcher throws with.\n",
       "8      pitch_type           The type of pitch derived from Statcast.\n",
       "9           balls                Pre-pitch number of balls in count.\n",
       "10        strikes              Pre-pitch number of strikes in count.\n",
       "11          pfx_x  Horizontal movement in feet from the catcher's...\n",
       "12          pfx_z  Vertical movement in feet from the catcher's p...\n",
       "13        plate_x  Horizontal position of the ball when it crosse...\n",
       "14        plate_z  Vertical position of the ball when it crosses ...\n",
       "15         sz_top  Top of the batter's strike zone set by the ope...\n",
       "16         sz_bot  Bottom of the batter's strike zone set by the ..."
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "documentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "32d46eb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(709852, 17)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1e6753ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(708540, 17)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "da282579",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(717945, 16)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "869e9a0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "season             int64\n",
       "pitch_id         float64\n",
       "release_speed    float64\n",
       "batter             int64\n",
       "pitcher            int64\n",
       "stand             object\n",
       "p_throws          object\n",
       "pitch_type        object\n",
       "balls              int64\n",
       "strikes            int64\n",
       "pfx_x            float64\n",
       "pfx_z            float64\n",
       "plate_x          float64\n",
       "plate_z          float64\n",
       "sz_top           float64\n",
       "sz_bot           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year3.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d6395ae9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>pitch_id</th>\n",
       "      <th>release_speed</th>\n",
       "      <th>batter</th>\n",
       "      <th>pitcher</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>pfx_x</th>\n",
       "      <th>pfx_z</th>\n",
       "      <th>plate_x</th>\n",
       "      <th>plate_z</th>\n",
       "      <th>sz_top</th>\n",
       "      <th>sz_bot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>709852.0</td>\n",
       "      <td>7.084710e+05</td>\n",
       "      <td>709485.000000</td>\n",
       "      <td>709852.000000</td>\n",
       "      <td>709852.000000</td>\n",
       "      <td>709852.000000</td>\n",
       "      <td>709852.000000</td>\n",
       "      <td>706819.000000</td>\n",
       "      <td>708792.000000</td>\n",
       "      <td>709485.000000</td>\n",
       "      <td>709452.000000</td>\n",
       "      <td>709485.000000</td>\n",
       "      <td>709440.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.355107e+06</td>\n",
       "      <td>88.848689</td>\n",
       "      <td>5787.098457</td>\n",
       "      <td>5792.682917</td>\n",
       "      <td>0.883648</td>\n",
       "      <td>0.895387</td>\n",
       "      <td>-0.103550</td>\n",
       "      <td>0.657880</td>\n",
       "      <td>0.043603</td>\n",
       "      <td>2.275044</td>\n",
       "      <td>3.391976</td>\n",
       "      <td>1.573850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2.049152e+05</td>\n",
       "      <td>6.050308</td>\n",
       "      <td>521.396565</td>\n",
       "      <td>525.705395</td>\n",
       "      <td>0.968486</td>\n",
       "      <td>0.828389</td>\n",
       "      <td>0.866855</td>\n",
       "      <td>0.747155</td>\n",
       "      <td>0.846102</td>\n",
       "      <td>0.984652</td>\n",
       "      <td>0.164649</td>\n",
       "      <td>0.089665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000001e+06</td>\n",
       "      <td>30.100000</td>\n",
       "      <td>5001.000000</td>\n",
       "      <td>5003.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.560000</td>\n",
       "      <td>-2.130000</td>\n",
       "      <td>-6.100000</td>\n",
       "      <td>-5.070000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>0.770000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.177472e+06</td>\n",
       "      <td>84.599998</td>\n",
       "      <td>5334.000000</td>\n",
       "      <td>5351.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.830000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>-0.530000</td>\n",
       "      <td>1.640000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>1.510000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.355156e+06</td>\n",
       "      <td>89.900002</td>\n",
       "      <td>5720.000000</td>\n",
       "      <td>5728.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.170000</td>\n",
       "      <td>0.760000</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>2.280000</td>\n",
       "      <td>3.410000</td>\n",
       "      <td>1.560000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.532674e+06</td>\n",
       "      <td>93.699997</td>\n",
       "      <td>6177.000000</td>\n",
       "      <td>6176.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.590000</td>\n",
       "      <td>1.280000</td>\n",
       "      <td>0.610000</td>\n",
       "      <td>2.920000</td>\n",
       "      <td>3.490000</td>\n",
       "      <td>1.620000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.709852e+06</td>\n",
       "      <td>103.400002</td>\n",
       "      <td>7100.000000</td>\n",
       "      <td>7100.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.840000</td>\n",
       "      <td>2.580000</td>\n",
       "      <td>9.110000</td>\n",
       "      <td>9.390000</td>\n",
       "      <td>4.470000</td>\n",
       "      <td>2.260000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         season      pitch_id  release_speed         batter        pitcher  \\\n",
       "count  709852.0  7.084710e+05  709485.000000  709852.000000  709852.000000   \n",
       "mean        1.0  2.355107e+06      88.848689    5787.098457    5792.682917   \n",
       "std         0.0  2.049152e+05       6.050308     521.396565     525.705395   \n",
       "min         1.0  2.000001e+06      30.100000    5001.000000    5003.000000   \n",
       "25%         1.0  2.177472e+06      84.599998    5334.000000    5351.000000   \n",
       "50%         1.0  2.355156e+06      89.900002    5720.000000    5728.000000   \n",
       "75%         1.0  2.532674e+06      93.699997    6177.000000    6176.000000   \n",
       "max         1.0  2.709852e+06     103.400002    7100.000000    7100.000000   \n",
       "\n",
       "               balls        strikes          pfx_x          pfx_z  \\\n",
       "count  709852.000000  709852.000000  706819.000000  708792.000000   \n",
       "mean        0.883648       0.895387      -0.103550       0.657880   \n",
       "std         0.968486       0.828389       0.866855       0.747155   \n",
       "min         0.000000       0.000000      -2.560000      -2.130000   \n",
       "25%         0.000000       0.000000      -0.830000       0.200000   \n",
       "50%         1.000000       1.000000      -0.170000       0.760000   \n",
       "75%         2.000000       2.000000       0.590000       1.280000   \n",
       "max         4.000000       2.000000       2.840000       2.580000   \n",
       "\n",
       "             plate_x        plate_z         sz_top         sz_bot  \n",
       "count  709485.000000  709452.000000  709485.000000  709440.000000  \n",
       "mean        0.043603       2.275044       3.391976       1.573850  \n",
       "std         0.846102       0.984652       0.164649       0.089665  \n",
       "min        -6.100000      -5.070000       2.500000       0.770000  \n",
       "25%        -0.530000       1.640000       3.300000       1.510000  \n",
       "50%         0.040000       2.280000       3.410000       1.560000  \n",
       "75%         0.610000       2.920000       3.490000       1.620000  \n",
       "max         9.110000       9.390000       4.470000       2.260000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This describe command allows us to see some summary statistics of the numerical categories\n",
    "\n",
    "year1.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1a42f02e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "season              0\n",
       "pitch_id         1381\n",
       "release_speed     367\n",
       "batter              0\n",
       "pitcher             0\n",
       "description         0\n",
       "stand               0\n",
       "p_throws            0\n",
       "pitch_type        367\n",
       "balls               0\n",
       "strikes             0\n",
       "pfx_x            3033\n",
       "pfx_z            1060\n",
       "plate_x           367\n",
       "plate_z           400\n",
       "sz_top            367\n",
       "sz_bot            412\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We see that we do have some null values here\n",
    "year1.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5933cc16",
   "metadata": {},
   "source": [
    "## Data Merging\n",
    "\n",
    "Here we will combine the year1 and year2 data set to make essentially one big train set for our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "eaf84eda",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined = pd.concat([year1, year2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "663643c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>pitch_id</th>\n",
       "      <th>release_speed</th>\n",
       "      <th>batter</th>\n",
       "      <th>pitcher</th>\n",
       "      <th>description</th>\n",
       "      <th>stand</th>\n",
       "      <th>p_throws</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>pfx_x</th>\n",
       "      <th>pfx_z</th>\n",
       "      <th>plate_x</th>\n",
       "      <th>plate_z</th>\n",
       "      <th>sz_top</th>\n",
       "      <th>sz_bot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2697762.0</td>\n",
       "      <td>93.800003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SI</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.98</td>\n",
       "      <td>0.72</td>\n",
       "      <td>-1.23</td>\n",
       "      <td>4.10</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2697773.0</td>\n",
       "      <td>95.599998</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>foul</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.96</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>3.10</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2697902.0</td>\n",
       "      <td>94.800003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5842</td>\n",
       "      <td>foul</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>1.16</td>\n",
       "      <td>0.31</td>\n",
       "      <td>2.40</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2697993.0</td>\n",
       "      <td>87.300003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5041</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SL</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.82</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>1.11</td>\n",
       "      <td>2.21</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2697995.0</td>\n",
       "      <td>98.599998</td>\n",
       "      <td>5782</td>\n",
       "      <td>5041</td>\n",
       "      <td>called_strike</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>0.95</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>3.39</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season   pitch_id  release_speed  batter  pitcher    description stand  \\\n",
       "0       1  2697762.0      93.800003    5782     5738           ball     R   \n",
       "1       1  2697773.0      95.599998    5782     5738           foul     R   \n",
       "2       1  2697902.0      94.800003    5782     5842           foul     R   \n",
       "3       1  2697993.0      87.300003    5782     5041           ball     R   \n",
       "4       1  2697995.0      98.599998    5782     5041  called_strike     R   \n",
       "\n",
       "  p_throws pitch_type  balls  strikes  pfx_x  pfx_z  plate_x  plate_z  sz_top  \\\n",
       "0        R         SI      1        1  -0.98   0.72    -1.23     4.10    3.70   \n",
       "1        R         FF      3        2  -0.38   0.96    -0.45     3.10    3.41   \n",
       "2        R         FF      1        0  -0.62   1.16     0.31     2.40    3.41   \n",
       "3        R         SL      2        1   0.82  -0.06     1.11     2.21    3.70   \n",
       "4        R         FF      3        1  -0.33   0.95    -0.35     3.39    3.70   \n",
       "\n",
       "   sz_bot  \n",
       "0    1.82  \n",
       "1    1.56  \n",
       "2    1.56  \n",
       "3    1.73  \n",
       "4    1.70  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "63b099d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1418392, 17)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "496b02c5",
   "metadata": {},
   "source": [
    "## Feature Engineering\n",
    "\n",
    "We have a good setup for machine learning here. We have mostly numeric features and columns match across years. What we need to do is a bit of feature engineering to get the dataframes in a good place to be able to work with machine learning models.\n",
    "\n",
    "To begin, let's fill in the NaN values with averages from their rows, and use dummie variables to replace the object variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9c9bffcd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "season              0\n",
       "pitch_id         1611\n",
       "release_speed     779\n",
       "batter              0\n",
       "pitcher             0\n",
       "description         0\n",
       "stand               0\n",
       "p_throws            0\n",
       "pitch_type        740\n",
       "balls               0\n",
       "strikes             0\n",
       "pfx_x            3460\n",
       "pfx_z            1477\n",
       "plate_x           779\n",
       "plate_z           812\n",
       "sz_top            779\n",
       "sz_bot            824\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6a482241",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "season              0\n",
       "pitch_id         1076\n",
       "release_speed     270\n",
       "batter              0\n",
       "pitcher             0\n",
       "stand               0\n",
       "p_throws            0\n",
       "pitch_type        269\n",
       "balls               0\n",
       "strikes             0\n",
       "pfx_x            2835\n",
       "pfx_z             769\n",
       "plate_x          5726\n",
       "plate_z           296\n",
       "sz_top           2539\n",
       "sz_bot            315\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year3.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a831802d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filling in columns with NaN values with the mean from that column.\n",
    "# pitch_type has some NaN values but we will ignore them for now as that is an object variable type\n",
    "\n",
    "columns_to_fill = ['pitch_id', 'release_speed', 'pfx_x', 'pfx_z', 'plate_x', 'plate_z', 'sz_top', 'sz_bot']\n",
    "combined_filled = combined.copy()  # Make a copy of the original DataFrame\n",
    "combined_filled[columns_to_fill] = combined_filled[columns_to_fill].fillna(combined[columns_to_fill].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3fa88ad1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>pitch_id</th>\n",
       "      <th>release_speed</th>\n",
       "      <th>batter</th>\n",
       "      <th>pitcher</th>\n",
       "      <th>description</th>\n",
       "      <th>stand</th>\n",
       "      <th>p_throws</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>pfx_x</th>\n",
       "      <th>pfx_z</th>\n",
       "      <th>plate_x</th>\n",
       "      <th>plate_z</th>\n",
       "      <th>sz_top</th>\n",
       "      <th>sz_bot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2697762.0</td>\n",
       "      <td>93.800003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SI</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.98</td>\n",
       "      <td>0.72</td>\n",
       "      <td>-1.23</td>\n",
       "      <td>4.10</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2697773.0</td>\n",
       "      <td>95.599998</td>\n",
       "      <td>5782</td>\n",
       "      <td>5738</td>\n",
       "      <td>foul</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.96</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>3.10</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2697902.0</td>\n",
       "      <td>94.800003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5842</td>\n",
       "      <td>foul</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>1.16</td>\n",
       "      <td>0.31</td>\n",
       "      <td>2.40</td>\n",
       "      <td>3.41</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2697993.0</td>\n",
       "      <td>87.300003</td>\n",
       "      <td>5782</td>\n",
       "      <td>5041</td>\n",
       "      <td>ball</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>SL</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.82</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>1.11</td>\n",
       "      <td>2.21</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2697995.0</td>\n",
       "      <td>98.599998</td>\n",
       "      <td>5782</td>\n",
       "      <td>5041</td>\n",
       "      <td>called_strike</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>FF</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>0.95</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>3.39</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season   pitch_id  release_speed  batter  pitcher    description stand  \\\n",
       "0       1  2697762.0      93.800003    5782     5738           ball     R   \n",
       "1       1  2697773.0      95.599998    5782     5738           foul     R   \n",
       "2       1  2697902.0      94.800003    5782     5842           foul     R   \n",
       "3       1  2697993.0      87.300003    5782     5041           ball     R   \n",
       "4       1  2697995.0      98.599998    5782     5041  called_strike     R   \n",
       "\n",
       "  p_throws pitch_type  balls  strikes  pfx_x  pfx_z  plate_x  plate_z  sz_top  \\\n",
       "0        R         SI      1        1  -0.98   0.72    -1.23     4.10    3.70   \n",
       "1        R         FF      3        2  -0.38   0.96    -0.45     3.10    3.41   \n",
       "2        R         FF      1        0  -0.62   1.16     0.31     2.40    3.41   \n",
       "3        R         SL      2        1   0.82  -0.06     1.11     2.21    3.70   \n",
       "4        R         FF      3        1  -0.33   0.95    -0.35     3.39    3.70   \n",
       "\n",
       "   sz_bot  \n",
       "0    1.82  \n",
       "1    1.56  \n",
       "2    1.56  \n",
       "3    1.73  \n",
       "4    1.70  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_filled.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "131dd4be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "season             0\n",
       "pitch_id           0\n",
       "release_speed      0\n",
       "batter             0\n",
       "pitcher            0\n",
       "description        0\n",
       "stand              0\n",
       "p_throws           0\n",
       "pitch_type       740\n",
       "balls              0\n",
       "strikes            0\n",
       "pfx_x              0\n",
       "pfx_z              0\n",
       "plate_x            0\n",
       "plate_z            0\n",
       "sz_top             0\n",
       "sz_bot             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_filled.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ff16459e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filling in columns with NaN values with the mean from that column for year1.\n",
    "# pitch_type has some NaN values but we will ignore them for now as that is an object variable type\n",
    "\n",
    "year1_filled = year1.copy()  # Make a copy of the original DataFrame\n",
    "year1_filled[columns_to_fill] = year1_filled[columns_to_fill].fillna(year1[columns_to_fill].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "af782544",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "season             0\n",
       "pitch_id           0\n",
       "release_speed      0\n",
       "batter             0\n",
       "pitcher            0\n",
       "description        0\n",
       "stand              0\n",
       "p_throws           0\n",
       "pitch_type       367\n",
       "balls              0\n",
       "strikes            0\n",
       "pfx_x              0\n",
       "pfx_z              0\n",
       "plate_x            0\n",
       "plate_z            0\n",
       "sz_top             0\n",
       "sz_bot             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year1_filled.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d01c8dfd",
   "metadata": {},
   "source": [
    "### Label Encoding\n",
    "When we encode features, it allows us to more easily utilize them in our machine learning models. Here we will encode the object datatypes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "15979824",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "season             int64\n",
       "pitch_id         float64\n",
       "release_speed    float64\n",
       "batter             int64\n",
       "pitcher            int64\n",
       "description       object\n",
       "stand             object\n",
       "p_throws          object\n",
       "pitch_type        object\n",
       "balls              int64\n",
       "strikes            int64\n",
       "pfx_x            float64\n",
       "pfx_z            float64\n",
       "plate_x          float64\n",
       "plate_z          float64\n",
       "sz_top           float64\n",
       "sz_bot           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_filled.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cfd5bf7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['ball', 'foul', 'called_strike', 'blocked_ball', 'hit_into_play',\n",
       "       'hit_by_pitch', 'swinging_strike', 'foul_tip', 'foul_bunt',\n",
       "       'swinging_strike_blocked', 'missed_bunt', 'pitchout',\n",
       "       'bunt_foul_tip', 'foul_pitchout'], dtype=object)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_filled['description'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2540eb07",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We need to encode the object categories for modeling\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Initialize LabelEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "\n",
    "# Encode each necessary column in combined_filled\n",
    "for column in ['stand', 'p_throws', 'pitch_type']:\n",
    "    combined_filled[column] = label_encoder.fit_transform(combined_filled[column])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b32d9c9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Encode each necessary column in year3\n",
    "for column in ['stand', 'p_throws', 'pitch_type']:\n",
    "    year3[column] = label_encoder.fit_transform(year3[column])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76387056",
   "metadata": {},
   "source": [
    "### Creating target column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d4020f28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a function to map swing outcomes to 1 and non-swing outcomes to 0\n",
    "def map_swing(description):\n",
    "    swing_outcomes = ['swinging_strike', 'hit_into_play', 'foul', 'foul_tip', 'foul_bunt',\n",
    "                      'swinging_strike_blocked', 'missed_bunt', 'bunt_foul_tip', 'foul_pitchout']\n",
    "    if description in swing_outcomes:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "32aac542",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply the function to create a new column called 'Swing'\n",
    "combined_filled['Swing'] = combined_filled['description'].apply(map_swing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "91ca67fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop description column\n",
    "combined_filled = combined_filled.drop(columns='description')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "553b09dd",
   "metadata": {},
   "source": [
    "# Modeling\n",
    "This is an interesting problem as we want to assign a probability based on a binary classification task. One of my favorite machine learning algorithms, XGBoost (eXtreme Gradient Boosting) fits well here. XGBoost uses gradient boosting framework and performs well in scenarios like we have here. Its efficiency and scalability will suit well for predicting the probability of a swing and a miss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "562f1af8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import accuracy_score, roc_auc_score\n",
    "\n",
    "# Separate features (X) and target variable (y)\n",
    "X = combined_filled.drop(columns=['Swing'])  # these are the features we will feed into our model\n",
    "y = combined_filled['Swing']  # This is our guide, our target variable about what we would like to predict.\n",
    "\n",
    "# Split the data into training and holdout set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize XGBoost classifier\n",
    "xgb_model = XGBClassifier(objective='binary:logistic', random_state=42)\n",
    "\n",
    "# Train the model\n",
    "xgb_model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test set\n",
    "probabilities = xgb_model.predict_proba(X_test)[:, 1]  # Probability of swing and miss."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "365c191f",
   "metadata": {},
   "source": [
    "### Hyperparameter tuning\n",
    "\n",
    "Going to be implementing a randomized search to fine-tune our XGBoost model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5315004e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best XGBoost parameters: {'n_estimators': 400, 'max_depth': 8, 'learning_rate': 0.1}\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=400, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=400, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=400, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_param_dist = {\n",
    "    'learning_rate': [0.01, 0.1, 0.3],\n",
    "    'n_estimators': [100, 200, 400],\n",
    "    'max_depth': [4, 6, 8]\n",
    "}\n",
    "\n",
    "# Instance of model\n",
    "model_xgb = xgb.XGBClassifier(objective='binary:logistic', random_state=42)\n",
    "\n",
    "# Perform search\n",
    "random_search = RandomizedSearchCV(\n",
    "    model_xgb,\n",
    "    param_distributions = xgb_param_dist,\n",
    "    n_iter=10,\n",
    "    cv=10,\n",
    "    scoring='neg_mean_squared_error',\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Fit the model\n",
    "random_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best params\n",
    "best_xgb_params = random_search.best_params_\n",
    "\n",
    "# Print out\n",
    "print(\"Best XGBoost parameters:\", best_xgb_params)\n",
    "\n",
    "# Get best estimator\n",
    "best_xgb_model = random_search.best_estimator_\n",
    "\n",
    "# Print out\n",
    "best_xgb_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "88539c7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a prediction with the best model\n",
    "forecast_xgb_best = best_xgb_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7921c9df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add predicted probabilities to the test set\n",
    "X_test['SwingProbability'] = forecast_xgb_best"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "858c77fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 0.08798677378304351\n"
     ]
    }
   ],
   "source": [
    "# Here we want to assess the accuracy of our model using mean squared error.\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "mse = mean_squared_error(y_test, forecast_xgb_best)\n",
    "print(\"Mean Squared Error:\", mse)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8c1387f",
   "metadata": {},
   "source": [
    "The incredibly low MSE shows that our model is very accurate. This is a great sign and we will continue to move forward. If I had a bit more time I would try some other models and compare their MSE. Logistic Regression, Random Forests, Support Vector Machines, and even Neural Networks could be good candidates here. I also would implement hyperparameter tuning with my XGBoost mode to achieve the highest accuracy possible. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1cb7682f",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['SwingProbability'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[38], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m year3 \u001b[38;5;241m=\u001b[39m year3\u001b[38;5;241m.\u001b[39mdrop(columns\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSwingProbability\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/frame.py:5258\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5110\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   5111\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   5112\u001b[0m     labels: IndexLabel \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5119\u001b[0m     errors: IgnoreRaise \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   5120\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5121\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   5122\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   5123\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5256\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   5257\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 5258\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39mdrop(\n\u001b[1;32m   5259\u001b[0m         labels\u001b[38;5;241m=\u001b[39mlabels,\n\u001b[1;32m   5260\u001b[0m         axis\u001b[38;5;241m=\u001b[39maxis,\n\u001b[1;32m   5261\u001b[0m         index\u001b[38;5;241m=\u001b[39mindex,\n\u001b[1;32m   5262\u001b[0m         columns\u001b[38;5;241m=\u001b[39mcolumns,\n\u001b[1;32m   5263\u001b[0m         level\u001b[38;5;241m=\u001b[39mlevel,\n\u001b[1;32m   5264\u001b[0m         inplace\u001b[38;5;241m=\u001b[39minplace,\n\u001b[1;32m   5265\u001b[0m         errors\u001b[38;5;241m=\u001b[39merrors,\n\u001b[1;32m   5266\u001b[0m     )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/generic.py:4549\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4547\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4548\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4549\u001b[0m         obj \u001b[38;5;241m=\u001b[39m obj\u001b[38;5;241m.\u001b[39m_drop_axis(labels, axis, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4551\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4552\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/generic.py:4591\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4589\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4590\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4591\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4592\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4594\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4595\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/indexes/base.py:6699\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6697\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   6698\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 6699\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(labels[mask])\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6700\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   6701\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['SwingProbability'] not found in axis\""
     ]
    }
   ],
   "source": [
    "year3 = year3.drop(columns='SwingProbability')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42b67115",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now we use our model to predict on year3\n",
    "probabilities_year3 = best_xgb_model.predict_proba(year3)[:,1]  # Probability of swing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68879e57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add predicted probabilities to the year3\n",
    "year3['SwingProbability'] = probabilities_year3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7341f3b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "year3.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72ba82e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting to csv\n",
    "year3.to_csv('validation.csv', index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "560516a8",
   "metadata": {},
   "source": [
    "# Question 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f27616a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define criteria for middle-middle pitches\n",
    "plate_x_center = 0  # Center of the strike zone on the x-axis\n",
    "plate_z_center = (3.58 + 1.66) / 2  # Center of the strike zone on the z-axis\n",
    "\n",
    "# Filter the DataFrame for middle-middle pitches\n",
    "middle_middle_pitches = combined_filled[(combined_filled['plate_x'].between(plate_x_center - 0.5, plate_x_center + 0.5)) & \n",
    "                           (combined_filled['plate_z'].between(plate_z_center - 0.5, plate_z_center + 0.5))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "474a5861",
   "metadata": {},
   "outputs": [],
   "source": [
    "middle_middle_pitches.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "650d09e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fitting model to middle middle pitches mm\n",
    "# Separate features (X) and target variable (y)\n",
    "X = middle_middle_pitches.drop(columns=['Swing'])  # these are the features we will feed into our model\n",
    "y = middle_middle_pitches['Swing']  # This is our guide, our target variable about what we would like to predict.\n",
    "\n",
    "# Split the data into training and holdout set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize XGBoost classifier\n",
    "xgb_model_mm = XGBClassifier(objective='binary:logistic', random_state=42)\n",
    "\n",
    "# Train the model\n",
    "xgb_model_mm.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test set\n",
    "probabilities_mm = xgb_model_mm.predict_proba(X_test)[:, 1]  # Probability of swing and miss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5d814c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Hyperparams for mm\n",
    "xgb_param_dist = {\n",
    "    'learning_rate': [0.01, 0.1, 0.3],\n",
    "    'n_estimators': [100, 200, 400],\n",
    "    'max_depth': [4, 6, 8]\n",
    "}\n",
    "\n",
    "# Instance of model\n",
    "model_xgb_mm = xgb.XGBClassifier(objective='reg:squarederror')\n",
    "\n",
    "# Perform search\n",
    "random_search = RandomizedSearchCV(\n",
    "    model_xgb_mm,\n",
    "    param_distributions = xgb_param_dist,\n",
    "    n_iter=10,\n",
    "    cv=10,\n",
    "    scoring='neg_mean_squared_error',\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Fit the model\n",
    "random_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best params\n",
    "best_xgb_params_mm = random_search.best_params_\n",
    "\n",
    "# Print out\n",
    "print(\"Best XGBoost parameters for middle-middle pitches:\", best_xgb_params_mm)\n",
    "\n",
    "# Get best estimator\n",
    "best_xgb_model_mm = random_search.best_estimator_\n",
    "\n",
    "# Print out\n",
    "best_xgb_model_mm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b4c00a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract feature importance scores from the trained XGBoost model\n",
    "feature_importance = best_xgb_model_mm.feature_importances_\n",
    "\n",
    "# Match feature importance scores with corresponding column names\n",
    "feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})\n",
    "\n",
    "# Sort the feature importance scores in descending order\n",
    "feature_importance_df_sorted = feature_importance_df.sort_values(by='Importance', ascending=False)\n",
    "\n",
    "# Print or visualize the sorted feature importance scores\n",
    "print(feature_importance_df_sorted)\n",
    "\n",
    "# Optionally, you can visualize the feature importance scores using a bar plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Importance', y='Feature', data=feature_importance_df_sorted, orient='h')\n",
    "plt.title('Feature Importance for Swing Probability in Middle-Middle Pitches')\n",
    "plt.xlabel('Importance')\n",
    "plt.ylabel('Feature')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4aa3562e",
   "metadata": {},
   "source": [
    "# Question 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "068656b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "only_2 = combined_filled[combined_filled['season'] == 2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bd92dd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features (X) and target variable (y)\n",
    "X_2= only_2.drop(columns=['Swing'])  # these are the features we will feed into our model\n",
    "y_2 = only_2['Swing']  # This is our guide, our target variable about what we would like to predict."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2730e9c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's focus just on season 2 for this problem\n",
    "# Let's begin by using our model to make predictions just for year2\n",
    "forecast_xgb_best_2 = best_xgb_model.predict_proba(X_2)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07c05bdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add predicted probabilities to the test set\n",
    "X_2['SwingProbability'] = forecast_xgb_best_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3968b1df",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2ac8022",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate Player Swing Probability (PSP)\n",
    "player_swing_prob = X_2.groupby('batter')['SwingProbability'].mean().reset_index()\n",
    "player_swing_prob.rename(columns={'SwingProbability': 'PSP'}, inplace=True)\n",
    "\n",
    "# Calculate League Average Swing Probability (LASP)\n",
    "league_avg_swing_prob = X_2['SwingProbability'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de6e73c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate Swing Performance Index (SPI)\n",
    "player_swing_prob['SPI'] = (player_swing_prob['PSP'] - league_avg_swing_prob) / league_avg_swing_prob\n",
    "\n",
    "# Sort players based on SPI values\n",
    "player_swing_prob_sorted = player_swing_prob.sort_values(by='SPI', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36239f4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Top 10 players\n",
    "player_swing_prob_sorted.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b78df28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bottom 10 players\n",
    "player_swing_prob_sorted.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcc2bd6a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
